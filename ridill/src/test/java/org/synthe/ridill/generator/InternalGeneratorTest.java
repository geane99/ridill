package org.synthe.ridill.generator;

import org.synthe.ridill.generator.InternalGenerator.*;
import static org.hamcrest.CoreMatchers.*;
import static org.junit.Assert.*;
import org.junit.Test;

import java.util.List;
import org.synthe.ridill.reflect.ClassType;
import org.synthe.ridill.reflect.ClassInfo;
public class InternalGeneratorTest {

	@Test
	public void type() throws Exception {
//		// TODO auto-generated by JUnit Helper.
//		assertThat(InternalGenerator.class, notNullValue());
	}

	@Test
	public void instantiation() throws Exception {
//		// TODO auto-generated by JUnit Helper.
//		Object extGenerator = null;
//		InternalGenerator target = new InternalGenerator(extGenerator);
//		assertThat(target, notNullValue());
	}

	@Test
	public void getEmbedValue_A$ReflectionInfo$Object() throws Exception {
//		// TODO auto-generated by JUnit Helper.
//		Object extGenerator = null;
//		InternalGenerator target = new InternalGenerator(extGenerator);
//		ReflectionInfo info = null;
//		Object enclosingInstance = null;
//		Object actual = target.getEmbedValue(info, enclosingInstance);
//		Object expected = null;
//		assertThat(actual, is(equalTo(expected)));
	}

	@Test
	public void getObjectValue_A$ReflectionInfo$Object() throws Exception {
//		// TODO auto-generated by JUnit Helper.
//		Object extGenerator = null;
//		InternalGenerator target = new InternalGenerator(extGenerator);
//		ReflectionInfo info = null;
//		Object enclosingInstance = null;
//		Object actual = target.getObjectValue(info, enclosingInstance);
//		Object expected = null;
//		assertThat(actual, is(equalTo(expected)));
	}

	@Test
	public void getEnumValue_A$ReflectionInfo$Object() throws Exception {
//		// TODO auto-generated by JUnit Helper.
//		Object extGenerator = null;
//		InternalGenerator target = new InternalGenerator(extGenerator);
//		ReflectionInfo info = null;
//		Object enclosingInstance = null;
//		Object actual = target.getEnumValue(info, enclosingInstance);
//		Object expected = null;
//		assertThat(actual, is(equalTo(expected)));
	}

}
