package org.synthe.ridill.dump;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.junit.Assert.assertThat;

import org.junit.Test;
import org.synthe.ridill.reflect.ReflectInfo;
public class DumpAdapterTest {

	@Test
	public void type() throws Exception {
		// TODO auto-generated by JUnit Helper.
		assertThat(DumpAdapter.class, notNullValue());
	}

	@Test
	public void instantiation() throws Exception {
		// TODO auto-generated by JUnit Helper.
		DumpAdapter target = new DumpAdapter();
		assertThat(target, notNullValue());
	}

	@Test
	public void getEmbedValue_A$ReflectionInfo$Object$Integer() throws Exception {
		// TODO auto-generated by JUnit Helper.
		DumpAdapter target = new DumpAdapter();
		ReflectInfo info = null;
		Object enclosingInstance = null;
		Integer depth = null;
		Object actual = target.getEmbedValue(info, enclosingInstance, depth);
		Object expected = null;
		assertThat(actual, is(equalTo(expected)));
	}

	@Test
	public void getObjectValue_A$ReflectionInfo$Object$Integer() throws Exception {
		// TODO auto-generated by JUnit Helper.
		DumpAdapter target = new DumpAdapter();
		ReflectInfo info = null;
		Object enclosingInstance = null;
		Integer depth = null;
		Object actual = target.getObjectValue(info, enclosingInstance, depth);
		Object expected = null;
		assertThat(actual, is(equalTo(expected)));
	}

	@Test
	public void getEnumValue_A$ReflectionInfo$Object$Integer() throws Exception {
		// TODO auto-generated by JUnit Helper.
		DumpAdapter target = new DumpAdapter();
		ReflectInfo info = null;
		Object enclosingInstance = null;
		Integer depth = null;
		Object actual = target.getEnumValue(info, enclosingInstance, depth);
		Object expected = null;
		assertThat(actual, is(equalTo(expected)));
	}

}
